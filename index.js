const TelegramBot = require('node-telegram-bot-api');

const path = require('path');
const token = '6805140082:AAEn9cnhWDN27MuICHriiKJnaRxnhHRjx9I';
// –¢–æ–∫–µ–Ω –æ—Ç –ë–æ—Ç–∞ –ò–ª—å–∏ 6805140082:AAEn9cnhWDN27MuICHriiKJnaRxnhHRjx9I
// –¢–æ–∫–µ–Ω –¥–ª–µ —Ç–µ—Å—Ç –±–æ—Ç–∞ 6948231596:AAF_Mv-hgIYFSIj63Rl3K41ltjEARf6S8IU
const bot = new TelegramBot(token, { polling: true });


const commands = `–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è /changepassword <–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å>\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "@" /changelichkatext <–Ω–æ–≤–∞—è –ª–∏—á–∫–∞>\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Å—ã–ª–∫–∏ /changelichkalink <–Ω–æ–≤–∞—è –ª–∏—á–∫–∞>\n\n–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /addadmin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> (–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID, –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ @getmyid_bot –∏ –≤–∑—è—Ç—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 'Your user ID' (–ù—É–∂–µ–Ω ID —Ç–æ–≥–æ, –∫–æ–º—É –¥–∞—é—Ç –∞–¥–º–∏–Ω–∫—É)\n\n–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /deleteadmin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> (–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n\n–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–Ω–∏—è –±–æ—Ç–æ–º /changeowner (–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ /adminlist`;
let owner = 6286624551;  // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
let correctPassword = '90002000';
let lichkatext = '@gemini_support1'; 
let lichkalink = 't.me/gemini_support1';
let adminsList = [];

bot.onText(/\/changepassword (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString(); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    const newPassword = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (owner === chatId || adminsList.includes(userId)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π correctPassword
        correctPassword = newPassword;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
        bot.sendMessage(chatId, `–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${correctPassword}`);
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.');
    }
});
bot.onText(/\/changeowner (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    if (owner === chatId) { // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        const newOwner = parseInt(match[1]); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        owner = newOwner;
        bot.sendMessage(chatId, `–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –±–æ—Ç–æ–º: ${owner}`);
    } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –ø—Ä–∞–≤');
    }
});
bot.on('message', (msg) => {
    if (msg.text === '/getcommands') {
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, commands)
    }
});
bot.onText(/\/changelichkatext (.+)/, (msg, match) => {
    const userId = msg.chat.id
    const chatId = msg.chat.id.toString();
    const newLichkaText = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—É—é –ª–∏—á–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (owner === userId || adminsList.includes(chatId)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        lichkatext = newLichkaText;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        bot.sendMessage(chatId, `–õ–∏—á–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "@" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${lichkatext}`);
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—á–∫–∏
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–∫–∏.');
    }
});
bot.onText(/\/changelichkalink (.+)/, (msg, match) => {
    const userId = msg.chat.id
    const chatId = msg.chat.id.toString();
    const newLichkaLink = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—É—é –ª–∏—á–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (owner === userId || adminsList.includes(chatId)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        lichkalink = newLichkaLink;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        bot.sendMessage(chatId, `–õ–∏—á–∫–∞ —Å—Å—ã–ª–∫–æ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${lichkalink}`);
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—á–∫–∏
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–∫–∏.');
    }
});
bot.onText(/\/addadmin (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;

    if (owner === senderId) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        const newAdminId = match[1]; // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        adminsList.push(newAdminId); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤
        bot.sendMessage(chatId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω.`);
    } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    }
});

bot.onText(/\/deleteadmin (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    if (owner === chatId) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        const adminIdToDelete = match[1]; // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        const index = adminsList.indexOf(adminIdToDelete); // –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤–µ
        if (index !== -1) { // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ
            adminsList.splice(index, 1); // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
            bot.sendMessage(chatId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${adminIdToDelete} —É–¥–∞–ª–µ–Ω.`);
        } else {
            bot.sendMessage(chatId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${adminIdToDelete} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    }
});
bot.onText(/\/adminlist/, (msg) => {
    const chatId = msg.chat.id;
    if (owner === chatId || adminsList.includes(chatId)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (adminsList.length > 0) {
            const adminListMessage = `–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n${adminsList.join('\n')}`;
            bot.sendMessage(chatId, adminListMessage);
        } else {
            bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.');
        }
    } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    }
});

// –ß–∞—Ç ID –∫–∞–Ω–∞–ª–∞ –ò–ª—å–∏ -1001736748551
// –ß–∞—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ -1002068538459
bot.on('chat_join_request', (msg) => {
    let chatId = '-1001736748551'
    let userId = msg.from.id;
    let username = msg.from.username
    bot.approveChatJoinRequest(chatId, userId)
        .catch((error) => {
            console.error(`Error accepting user: ${userId}`, error);
        });
    let approveChatJoinRequestMessage = `<b>Welcome to our winning team, ${username}! üëãüèº\nWant to start earning <u>30,000+RS</u> daily?</b>\n\nWrite to our support team <u><b>${lichkatext}</b></u> üì©\nAnd they will help you earn your first <b><u>10,000 RS</u> <u>today</u></b>!üí∞üí∞üí∞\n\nPress the button to activate this bot`;
    bot.sendMessage(userId, approveChatJoinRequestMessage, {
        parse_mode: 'HTML',
        reply_markup: {
            keyboard: [
                [{ text: 'START‚ñ∂Ô∏è' }]
            ],
            resize_keyboard: true
        }
    });
});

bot.on('text', (msg) => {
    let text = msg.text;
    if (text === 'START‚ñ∂Ô∏è') {
        let chatId = msg.chat.id
        let text = `<b>With my bot you can earn and more than 10k a day!üî•</b>\nWe guarantee that this <u>is the minimum amount you can earn</u> ‚úÖ\n\nTo start working with our bot first of all write to support <b>${lichkatext}</b>üì©, they will tell you how to earn and give you a special bonus in the form of <u>150% to deposit + 250 fs</u>üéÅ`
        let video = path.join(__dirname, 'video0.mp4');
        bot.sendVideo(chatId, video, {
            contentType: 'video/mp4',
            caption: text,
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'Get 150% + 250 fs', url: `${lichkalink}` }, { text: 'Get the password', url: `${lichkalink}` }],
                    [{ text: 'üèÜBenefits of AVIATOR GEMINIüèÜ', callback_data: 'photoReviewThirdMessageButton' }],
                    [{ text: '‚úÖEnter the password', callback_data: 'typeInPasswordButton' }]
                ]
            }
        }).catch((error) => {
            console.error('Error sending video:', error);
        });
    }
});

bot.on('message', (msg) => {
    let text = msg.text;
    if (text === '/start') {
        let chatId = msg.chat.id
        let text = `<b>With my bot you can earn and more than 10k a day!üî•</b>\nWe guarantee that this <u>is the minimum amount you can earn</u> ‚úÖ\n\nTo start working with our bot first of all write to support <b>${lichkatext}</b>üì©, they will tell you how to earn and give you a special bonus in the form of <u>150% to deposit + 250 fs</u>üéÅ`
        let video = path.join(__dirname, 'video0.mp4');
        bot.sendVideo(chatId, video, {
            contentType: 'video/mp4',
            caption: text,
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'Get 150% + 250 fs', url: `${lichkalink}` }, { text: 'Get the password', url: `${lichkalink}` }],
                    [{ text: 'üèÜBenefits of AVIATOR GEMINIüèÜ', callback_data: 'photoReviewThirdMessageButton' }],
                    [{ text: '‚úÖEnter the password', callback_data: 'typeInPasswordButton' }]
                ]
            }
        }).catch((error) => {
            console.error('Error sending video:', error);
        });
    }
});




// bot.on('callback_query', (query) => {
//     if (query.data === 'secondMessageButton') {
//         const chatId = query.message.chat.id;
//         const videoSecondPost = path.join(__dirname, 'video1.mp4');
//         let text = `The benefits offered by my cutting-edge AI technology, GEMINI, encompass:\n\n<i>1. Daily algorithm updates‚úîÔ∏è\n2. Comprehensive analysis of ALL AVIATOR games every day‚úîÔ∏è\n3. Regular updates on all gaming strategies‚úîÔ∏è</i>\n\n<u>This ensures that we have every opportunity for successful operations and earningsüíØ</u>`
//         bot.sendVideo(chatId, videoSecondPost, {
//             caption: text,
//             parse_mode: `HTML`,
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: '‚úÖEnter the password', callback_data: 'photoReviewThirdMessageButton' }]
//                 ]
//             }
//         })
//     }
// });

// bot.on('callback_query', (query) => {
//     if (query.data === 'thirdMessageButton') {
//         const chatId = query.message.chat.id;
//         const photoForPost = path.join(__dirname, 'photo1.jpg');
//         let text = `<b>1. Register through the provided LINK‚¨áÔ∏è\nhttps://2skonkem5mb.com/rXZs\n\n2. Top up your real balance with 500 Rs+\n\n3. Send a screenshot of the deposit to support ${lichkatext}\n\n4. Enter the password to activate the bot</b>`
//         bot.sendPhoto(chatId, photoForPost, {
//             caption: text,
//             parse_mode: `HTML`,
//             disable_web_page_preview: true,
//             reply_markup: {
//                 inline_keyboard: [
//                     // [{ text: 'üì∫Video tutorial', callback_data: 'videoReviewThirdMessageButton' }],
//                     [{ text: '‚úÖEnter the password', callback_data: 'photoReviewThirdMessageButton' }],
//                     [{ text: 'üèÜBenefits of AVIATOR GEMINIüèÜ', callback_data: 'secondMessageButton' }]
//                 ]
//             }
//         })
//     }
// });

// bot.on('callback_query', (query) => {
//     if (query.data === 'videoReviewThirdMessageButton') {
//         const chatId = query.message.chat.id;
//         let videoInstruction = path.join(__dirname, 'videoInstruction.mp4');
//         let textVideo = `In this instructional video, you'll learn the proper usage of signals with our bot.\n\nPlease take a moment to view it, as it's crucial to safeguard your funds!\n\nFor any inquiries, feel free to contact our support team at ${lichkatext}`
//         bot.sendVideo(chatId, videoInstruction, {
//             caption: textVideo
//         })
//     }
// });

bot.on('callback_query', async (query) => {
    if (query.data === 'photoReviewThirdMessageButton') {
        const chatId = query.message.chat.id;
        let photoReview1 = path.join(__dirname, 'photoReview1.jpg');
        let photoReview2 = path.join(__dirname, 'photoReview2.jpg');
        let photoReview3 = path.join(__dirname, 'photoReview3.jpg');
        let photoReview4 = path.join(__dirname, 'photoReview4.jpg');
        let photoReview5 = path.join(__dirname, 'photoReview5.jpg');
        let photoReview6 = path.join(__dirname, 'photoReview6.jpg');
        let photoReview7 = path.join(__dirname, 'photoReview7.jpg');
        let photoReviews = [
            { type: 'photo', media: photoReview1 },
            { type: 'photo', media: photoReview2 },
            { type: 'photo', media: photoReview3 },
            { type: 'photo', media: photoReview4 },
            { type: 'photo', media: photoReview5 },
            { type: 'photo', media: photoReview6 },
            { type: 'photo', media: photoReview7 },
        ]
        await bot.sendMediaGroup(chatId, photoReviews)
        // let photoReview2 = path.join(__dirname, 'photoReview2.jpg');
        // let text2 = `–¢–µ–∫—Å—Ç –∫ –æ—Ç–∑—ã–≤—É`
        // await bot.sendPhoto(chatId, photoReview2, {
        //     caption: text2,
        //     parse_mode: `HTML`,
        //     reply_markup: {
        //         inline_keyboard: [
        //             [{ text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–∫—É', url: 'https://t.me/mercedanet'}],
        //             [{ text: '–í–æ–∑—Ä–∞—Ç –∫–æ –≤—Ç–æ—Ä–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é', callback_data: 'secondMessageButton'}]
        //         ]
        //     }
        // })
        // let photoReview3 = path.join(__dirname, 'photoReview3.jpg');
        // let text3 = `–¢–µ–∫—Å—Ç –∫ –æ—Ç–∑—ã–≤—É`
        // await bot.sendPhoto(chatId, photoReview3, {
        //     caption: text3,
        //     parse_mode: `HTML`,
        //     reply_markup: {
        //         inline_keyboard: [
        //             [{ text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–∫—É', url: 'https://t.me/mercedanet'}],
        //             [{ text: '–í–æ–∑—Ä–∞—Ç –∫–æ –≤—Ç–æ—Ä–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é', callback_data: 'secondMessageButton'}]
        //         ]
        //     }
        // })
        let textAfterReviews = `Join us today, and together we will start your path to financial\nindependence right now. Get the bot password by writing to our support <b>${lichkatext}</b>ü§ë`
        await bot.sendMessage(chatId, textAfterReviews, {
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîêType in your password', callback_data: 'typeInPasswordButton' }]
                ]
            }
        })
    }
});

const userStates = {};

bot.on('callback_query', (query) => {
    if (query.data === 'typeInPasswordButton') {
        const chatId = query.message.chat.id;
        let textBeforePassword = `<b>Please enter the password.\n\nIf anything goes wrong, reach out to support for assistance at ${lichkatext}‚úîÔ∏è</b>`
        bot.sendMessage(chatId, textBeforePassword, {
            parse_mode: `HTML`,
        })
        userStates[chatId] = 'waiting_for_password';
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    if (userStates[chatId] === 'waiting_for_password') {
        const enteredPassword = msg.text;

        if (enteredPassword.toLowerCase() === correctPassword.toLowerCase()) {
            const textCheckingPassword = `<code>Checking your password in the database... ‚åõÔ∏è</code>`;
            await bot.sendMessage(chatId, textCheckingPassword, { parse_mode: "HTML" });

            await new Promise(resolve => setTimeout(resolve, 2000));

            const textPasswordCorrect = `<code>Password entered correctly ‚úÖ</code>`;
            await bot.sendMessage(chatId, textPasswordCorrect, { parse_mode: "HTML" });

            delete userStates[chatId];

            const textPasswordCorrectMessageTwo = `Ready to start getting signals?`;
            await bot.sendMessage(chatId, textPasswordCorrectMessageTwo, {
                parse_mode: `HTML`,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üöÄGet signal', callback_data: 'startSignals' }]
                    ]
                }
            });
        } else {
            let textWrongPassword = `<code>Wrong password, try again</code>`;
            bot.sendMessage(chatId, textWrongPassword, {
                parse_mode: `HTML`,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë•Message me', url: `${lichkalink}` }]
                    ]
                }
            });
        }
    }
});


function getRandomCoefficient() {
    const minCoefficient = 1.20;
    const maxCoefficient = 2.50;
    let randomCoefficient;
    if (Math.random() < 0.7) { // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ 70%
        randomCoefficient = (Math.random() * (1.5 - minCoefficient) + minCoefficient).toFixed(2);
    } else {
        randomCoefficient = (Math.random() * (maxCoefficient - 1.5) + 1.5).toFixed(2);
    }
    return randomCoefficient;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã –æ—Ç 50 –¥–æ 250 —Å —à–∞–≥–æ–º 10
function getRandomAmount() {
    const rawAmount = Math.floor(Math.random() * (21 - 5 + 1)) + 5; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 21
    const roundedAmount = rawAmount * 10; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–µ–ª –æ—Ç 50 –¥–æ 210
    return roundedAmount;
}



let currentAmount = 50;  // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ randomAmount
let currentCoefficient = getRandomCoefficient();
let consecutiveLoseCount = 0;  // –°—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;

    if (query.data === 'startSignals') {
        let botThinkingText = `Calculating the bet and the optimal amount... ‚åõÔ∏è`
        await bot.sendMessage(chatId, botThinkingText);

        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

        await delay(3000);
        currentCoefficient = getRandomCoefficient();  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π
        currentAmount = getRandomAmount();  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É

        let textSignal = `<b>üíµ Bet: ${currentAmount} RS in the next round\n\n‚úã Withdraw at ${currentCoefficient}x</b>`;
        consecutiveLoseCount = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ

        await bot.sendMessage(chatId, textSignal, {
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üü¢ WIN', callback_data: 'winSignal' },
                    { text: 'üî¥ LOSE', callback_data: 'loseSignal' }]
                ]
            }
        });
    } else if (query.data === 'loseSignal') {
        let botThinkingText = `Calculating the bet and the optimal amount... ‚åõÔ∏è`
        await bot.sendMessage(chatId, botThinkingText);

        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

        await delay(3000);
        currentCoefficient = getRandomCoefficient();
        currentAmount *= 2;  // –£–¥–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        consecutiveLoseCount++;  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤

        let textLose = `<b>üíµ Bet: ${currentAmount} RS in the next round\n\n‚úã Withdraw at ${currentCoefficient}x</b>`;

        if (consecutiveLoseCount >= 3) {
            textLose = 'You are doing something wrong';
            consecutiveLoseCount = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 3 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥

            // –ò–∑–º–µ–Ω—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª'
            await bot.sendMessage(chatId, textLose, {
                parse_mode: `HTML`,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üöÄGet signal', callback_data: 'startSignals' },
                        { text: 'üë•Message me', url: `${lichkalink}` }]
                    ]
                }
            });
            return;  // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "–¢—ã –¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫"
        }

        // –ò–∑–º–µ–Ω—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫–∏ 'win' –∏ 'lose'
        await bot.sendMessage(chatId, textLose, {
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üü¢ WIN', callback_data: 'winSignal' },
                    { text: 'üî¥ LOSE', callback_data: 'loseSignal' }]
                ]
            }
        });
    } else if (query.data === 'winSignal') {
        let botThinkingText = `Calculating the bet and the optimal amount... ‚åõÔ∏è`
        await bot.sendMessage(chatId, botThinkingText);

        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

        await delay(3000);
        currentCoefficient = getRandomCoefficient();  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
        currentAmount = getRandomAmount();  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É

        let textWin = `<b>üíµ Bet: ${currentAmount} RS in the next round\n\n‚úã Withdraw at ${currentCoefficient}x</b>`;
        consecutiveLoseCount = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ

        await bot.sendMessage(chatId, textWin, {
            parse_mode: `HTML`,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üü¢ WIN', callback_data: 'winSignal' },
                    { text: 'üî¥ LOSE', callback_data: 'loseSignal' }]
                ]
            }
        });
    }
});



